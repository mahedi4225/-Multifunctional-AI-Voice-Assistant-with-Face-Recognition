import cv2
import time
import matplotlib.pyplot as plt
import numpy as np
import torch
import torchvision.transforms as transforms
from torchvision import models
from PIL import Image

# Function to capture and save the reference image
def capture_reference_image(username):
    # Open the default camera
    cap = cv2.VideoCapture(0)

    # Allow time for the camera to stabilize
    time.sleep(2)

    # Read a frame from the camera
    ret, frame = cap.read()

    # Display the frame
    cv2.imshow("Capture Reference Image", frame)

    # Save the frame as a reference image with the username
    cv2.imwrite(f"{username}_reference_image.jpg", frame)

    # Release the camera and close the window
    cap.release()
    cv2.destroyAllWindows()

# Function to compare the reference image with a new image using Siamese Networks
def compare_images(username):
    # Load the reference image
    reference_image = Image.open(f"{username}_reference_image.jpg")

    # Open the default camera
    cap = cv2.VideoCapture(0)

    # Allow time for the camera to stabilize
    time.sleep(2)

    # Initialize the retry counter
    retry_count = 0

    # Load the Siamese Network model
    model = models.resnet18(pretrained=True)
    model.fc = torch.nn.Identity()  # Remove the last fully connected layer
    model.eval()  # Set the model to evaluation mode

    transform = transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
    ])

    while retry_count < 3:
        # Read a frame from the camera
        ret, frame = cap.read()

        # Display the frame
        cv2.imshow("Login Image", frame)
        cv2.waitKey(2000)  # Delay for 2 seconds

        # Convert the frame to PIL Image
        login_image = Image.fromarray(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))

        # Preprocess the images
        reference_image_tensor = transform(reference_image).unsqueeze(0)
        login_image_tensor = transform(login_image).unsqueeze(0)

        # Forward pass through the model
        with torch.no_grad():
            reference_features = model(reference_image_tensor)
            login_features = model(login_image_tensor)

        # Calculate the Euclidean distance between the features
        distance = torch.dist(reference_features, login_features)

        # Release the camera and close the window
        cap.release()
        cv2.destroyAllWindows()

        # Display reference image and login image side by side
        fig, axes = plt.subplots(1, 2)
        axes[0].imshow(reference_image)
        axes[0].set_title("Reference Image")
        axes[0].axis("off")
        axes[1].imshow(login_image)
        axes[1].set_title("Login Image")
        axes[1].axis("off")
        plt.show()

        # Check if the face matches
        if distance < 10:
            return "Login Successful"
        else:
            retry_count += 1
            print(f"Face Not Matched. Retry {retry_count}")
            time.sleep(2)
            cap = cv2.VideoCapture(0)  # Reopen the camera

    # Retry limit reached, return to main menu
    return "Retry limit exceeded. Returning to the main menu."

# Signup function
def signup():
    # Get the username from the user
    username = input("Enter your username: ")

    # Check if the username already exists
    if is_username_taken(username):
        print("Username already taken. Please choose a different username.")
        return

    # Capture and save the reference image with the username
    capture_reference_image(username)
    print("Signup Successful")

# Login function
def login():
    # Get the username from the user
    username = input("Enter your username: ")

    # Check if the username exists
    if not is_username_taken(username):
        print("Username not correct. Returning to the main menu.")
        return

    # Compare the reference image with a new image for the given username
    result = compare_images(username)
    print(result)

# Check if the username is already taken
def is_username_taken(username):
    # Check if the reference image file exists for the given username
    return cv2.imread(f"{username}_reference_image.jpg") is not None

# Main program loop
while True:
    print("1. Signup")
    print("2. Login")
    print("3. Exit")
    choice = input("Enter your choice: ")

    if choice == "1":
        signup()
    elif choice == "2":
        login()
    elif choice == "3":
        break
    else:
        print("Invalid choice. Please try again.")
    print()
